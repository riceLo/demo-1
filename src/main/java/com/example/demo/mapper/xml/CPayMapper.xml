<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.CPayMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.CPay">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="milestone" jdbcType="TINYINT" property="milestone" />
    <result column="percentage" jdbcType="TINYINT" property="percentage" />
    <result column="constractID" jdbcType="INTEGER" property="constractid" />
    <result column="state" jdbcType="TINYINT" property="state" />
    <result column="Unpaidamount" jdbcType="DECIMAL" property="unpaidamount" />
    <result column="invoicetime" jdbcType="TIMESTAMP" property="invoicetime" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, milestone, percentage, constractID, state, Unpaidamount, invoicetime, amount
  </sql>

  <!--统计-->
  <select id="selectStatics" resultType="com.example.demo.ventity.VPayMoneyAmount">
    select sum(amount) as amount,sum(unpaidamount) as unpay,sum(amount) - sum(unpaidamount) as payFinish
    from c_pay where constractId = #{constractId}
  </select>

  <select id="selectByExample" parameterType="com.example.demo.entity.CPayExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from c_pay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from c_pay
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from c_pay
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.example.demo.entity.CPayExample">
    delete from c_pay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.example.demo.entity.CPay">
    insert into c_pay (id, milestone, percentage,
      constractID, state, Unpaidamount,
      invoicetime, amount)
    values (#{id,jdbcType=INTEGER}, #{milestone,jdbcType=TINYINT}, #{percentage,jdbcType=TINYINT},
      #{constractid,jdbcType=INTEGER}, #{state,jdbcType=TINYINT}, #{unpaidamount,jdbcType=DECIMAL},
      #{invoicetime,jdbcType=TIMESTAMP}, #{amount,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.CPay">
    insert into c_pay
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="milestone != null">
        milestone,
      </if>
      <if test="percentage != null">
        percentage,
      </if>
      <if test="constractid != null">
        constractID,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="unpaidamount != null">
        Unpaidamount,
      </if>
      <if test="invoicetime != null">
        invoicetime,
      </if>
      <if test="amount != null">
        amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="milestone != null">
        #{milestone,jdbcType=TINYINT},
      </if>
      <if test="percentage != null">
        #{percentage,jdbcType=TINYINT},
      </if>
      <if test="constractid != null">
        #{constractid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=TINYINT},
      </if>
      <if test="unpaidamount != null">
        #{unpaidamount,jdbcType=DECIMAL},
      </if>
      <if test="invoicetime != null">
        #{invoicetime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.example.demo.entity.CPayExample" resultType="java.lang.Long">
    select count(*) from c_pay
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update c_pay
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.milestone != null">
        milestone = #{record.milestone,jdbcType=TINYINT},
      </if>
      <if test="record.percentage != null">
        percentage = #{record.percentage,jdbcType=TINYINT},
      </if>
      <if test="record.constractid != null">
        constractID = #{record.constractid,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=TINYINT},
      </if>
      <if test="record.unpaidamount != null">
        Unpaidamount = #{record.unpaidamount,jdbcType=DECIMAL},
      </if>
      <if test="record.invoicetime != null">
        invoicetime = #{record.invoicetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update c_pay
    set id = #{record.id,jdbcType=INTEGER},
      milestone = #{record.milestone,jdbcType=TINYINT},
      percentage = #{record.percentage,jdbcType=TINYINT},
      constractID = #{record.constractid,jdbcType=INTEGER},
      state = #{record.state,jdbcType=TINYINT},
      Unpaidamount = #{record.unpaidamount,jdbcType=DECIMAL},
      invoicetime = #{record.invoicetime,jdbcType=TIMESTAMP},
      amount = #{record.amount,jdbcType=DECIMAL}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.CPay">
    update c_pay
    <set>
      <if test="milestone != null">
        milestone = #{milestone,jdbcType=TINYINT},
      </if>
      <if test="percentage != null">
        percentage = #{percentage,jdbcType=TINYINT},
      </if>
      <if test="constractid != null">
        constractID = #{constractid,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=TINYINT},
      </if>
      <if test="unpaidamount != null">
        Unpaidamount = #{unpaidamount,jdbcType=DECIMAL},
      </if>
      <if test="invoicetime != null">
        invoicetime = #{invoicetime,jdbcType=TIMESTAMP},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.CPay">
    update c_pay
    set milestone = #{milestone,jdbcType=TINYINT},
      percentage = #{percentage,jdbcType=TINYINT},
      constractID = #{constractid,jdbcType=INTEGER},
      state = #{state,jdbcType=TINYINT},
      Unpaidamount = #{unpaidamount,jdbcType=DECIMAL},
      invoicetime = #{invoicetime,jdbcType=TIMESTAMP},
      amount = #{amount,jdbcType=DECIMAL}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>
